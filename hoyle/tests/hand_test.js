// Generated by CoffeeScript 1.3.3
(function() {
  var Flush, FourOfAKind, FullHouse, Hand, OnePair, Straight, StraightFlush, ThreeOfAKind, TwoPair;

  require('should');

  Hand = require('../hand').Hand;

  Flush = require('../hand').Flush;

  StraightFlush = require('../hand').StraightFlush;

  Straight = require('../hand').Straight;

  FourOfAKind = require('../hand').FourOfAKind;

  FullHouse = require('../hand').FullHouse;

  ThreeOfAKind = require('../hand').ThreeOfAKind;

  TwoPair = require('../hand').TwoPair;

  OnePair = require('../hand').OnePair;

  describe("Basic hand", function() {
    return it("should return a hand with cards sorted", function() {
      var hand;
      hand = new Hand(["5s", "Th", "3d", "Ac", "2h", "Ts", "8d"]);
      hand.cardPool[0].toString().should.equal("Ac");
      return hand.cardPool[6].toString().should.equal("2h");
    });
  });

  describe("A straight flush", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new StraightFlush(["5h", "6s", "3s", "2s", "5s", "4s", "5c"]);
      return hand.isPossible.should.equal(true);
    });
    return it("should detect a when it's not possible", function() {
      var hand;
      hand = new StraightFlush(["5h", "6c", "3s", "2s", "5s", "4s", "5c"]);
      return hand.isPossible.should.equal(false);
    });
  });

  describe("A four of a kind", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new FourOfAKind(["5h", "5d", "3s", "2c", "5s", "4s", "5c"]);
      return hand.isPossible.should.equal(true);
    });
    return it("should detect a when it's not possible", function() {
      var hand;
      hand = new FourOfAKind(["5h", "5d", "3s", "Ac", "3s", "Ts", "5c"]);
      return hand.isPossible.should.equal(false);
    });
  });

  describe("A full house", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new FullHouse(["5s", "5h", "3s", "3c", "2s", "Ts", "3d"]);
      hand.isPossible.should.equal(true);
      hand = new FullHouse(["8c", "8d", "Qh", "Qd", "Qs", "8h", "5s"]);
      return hand.isPossible.should.equal(true);
    });
    it("should detect a when it's not possible", function() {
      var hand;
      hand = new FullHouse(["5s", "5h", "3s", "3c", "2s", "Ts", "Td"]);
      hand.isPossible.should.equal(false);
      hand = new FullHouse(["Kc", "5s", "9d", "6h", "7c", '7d', "Kh"]);
      hand.isPossible.should.equal(false);
      hand = new FullHouse(["8h", "8s", "4s", "5c", "Qd", '5d', "Qh"]);
      return hand.isPossible.should.equal(false);
    });
    it("should pick the highest kickers", function() {
      var hand;
      hand = new FullHouse(["5s", "5h", "3s", "3c", "Th", "Ts", "Td"]);
      return hand.cards.toString().indexOf('3s').should.equal(-1);
    });
    return it("should be in order", function() {
      var hand;
      hand = new FullHouse(['8c', 'Qs', '8h', '5h', 'Js', 'Qc', 'Qh']);
      return hand.cards.toString().should.equal("Qs,Qc,Qh,8c,8h");
    });
  });

  describe("A flush", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new Flush(["5s", "Ts", "3s", "Ac", "2s", "Ts", "8d"]);
      return hand.isPossible.should.equal(true);
    });
    return it("should detect a when it's not possible", function() {
      var hand;
      hand = new Flush(["5s", "Ts", "3h", "Ac", "2s", "Ts", "8d"]);
      return hand.isPossible.should.equal(false);
    });
  });

  describe("A straight", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new Straight(["5h", "6s", "3s", "2s", "5s", "4s", "5c"]);
      return hand.isPossible.should.equal(true);
    });
    it("should detect when it's possible", function() {
      var hand;
      hand = new Straight(["5s", "6s", "7s", "8c", "Ts", "9s", "2d"]);
      return hand.isPossible.should.equal(true);
    });
    it("should detect a when it's not possible", function() {
      var hand;
      hand = new Straight(["5s", "6s", "6h", "7c", "2s", "Ts", "8d"]);
      return hand.isPossible.should.equal(false);
    });
    it("should handle a wheel", function() {
      var hand;
      hand = new Straight(["2s", "3s", "4h", "5c", "As", "Ts", "8d"]);
      return hand.isPossible.should.equal(true);
    });
    it("should know that a wheel can't go around", function() {
      var hand;
      hand = new Straight(["2s", "3s", "4h", "7c", "As", "Ts", "Kd"]);
      return hand.isPossible.should.equal(false);
    });
    return it("should know that a wheel's high card is not the Ace", function() {
      var highHand, lowHand;
      lowHand = new Straight(["2s", "3s", "4h", "5c", "As", "Ts", "8d"]);
      highHand = new Straight(["2s", "3s", "4h", "5c", "6s", "Ts", "8d"]);
      return lowHand.beats(highHand).should.equal(false);
    });
  });

  describe("Three of a kind", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new ThreeOfAKind(["5s", "5c", "5h", "6c", "Ts", "9s", "2d"]);
      hand.isPossible.should.equal(true);
      return hand.toString().should.equal("5s,5c,5h,Ts,9s");
    });
    return it("should detect when it's not possible", function() {
      var hand;
      hand = new ThreeOfAKind(["5s", "2c", "5h", "6c", "Ts", "9s", "2d"]);
      return hand.isPossible.should.equal(false);
    });
  });

  describe("Two pair", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new TwoPair(["5s", "5c", "6s", "6c", "Ts", "9s", "2d"]);
      return hand.isPossible.should.equal(true);
    });
    return it("should detect a when it's not possible", function() {
      var hand;
      hand = new TwoPair(["5s", "6s", "6h", "7c", "2s", "Ts", "8d"]);
      return hand.isPossible.should.equal(false);
    });
  });

  describe("One pair", function() {
    it("should detect when it's possible", function() {
      var hand;
      hand = new OnePair(["5s", "5c", "7s", "6c", "Ts", "9s", "2d"]);
      return hand.isPossible.should.equal(true);
    });
    it("should detect a when it's not possible", function() {
      var hand;
      hand = new OnePair(["5s", "6s", "Jh", "7c", "2s", "Ts", "8d"]);
      return hand.isPossible.should.equal(false);
    });
    return it("should know who ranks higher", function() {
      var highHand, lowHand;
      highHand = new OnePair(["4s", "4h", "Ah", "Jc", "Ts", "7s", "8d"]);
      lowHand = new OnePair(["4s", "4h", "Ac", "Tc", "9s", "7c", "8d"]);
      lowHand.beats(highHand).should.equal(false);
      return highHand.beats(lowHand).should.equal(true);
    });
  });

  describe("Building hands from 7 cards", function() {
    return it("Should detect the best hand", function() {
      var hand;
      hand = Hand.make(["8h", "8s", "4s", "5c", "Qd", '5d', "Qh"]);
      hand.name.should.equal("Two pair");
      hand.toString().should.equal("Qd,Qh,8h,8s,5c");
      hand = Hand.make(["4s", "4h", "Ah", "Jc", "Ts", "7s", "8d"]);
      return hand.toString().should.equal("4s,4h,Ah,Jc,Ts");
    });
  });

  describe("Finding winning hands", function() {
    it("should detect the winning hand from a list", function() {
      var h1, h2, h3, winners;
      h1 = Hand.make(["2s", "3s", "4h", "5c", "As", "Ts", "8d"]);
      h2 = Hand.make(["5s", "Ts", "3h", "Ac", "2s", "Ts", "8d"]);
      h3 = Hand.make(["5s", "5h", "3s", "3c", "2s", "Ts", "3d"]);
      winners = Hand.pickWinners([h1, h2, h3]);
      winners.length.should.equal(1);
      return winners[0].should.equal(h3);
    });
    return it("should detect the winning hands from a list", function() {
      var h1, h2, h3, winners;
      h1 = Hand.make(["2s", "3s", "4h", "5c", "As", "Ts", "8d"]);
      h2 = Hand.make(["2h", "3h", "4d", "5d", "Ah", "Tc", "8c"]);
      h3 = Hand.make(["5s", "Ts", "3h", "Ac", "2s", "Ts", "8d"]);
      winners = Hand.pickWinners([h1, h2, h3]);
      winners.length.should.equal(2);
      (winners.indexOf(h1) >= 0).should.equal(true);
      return (winners.indexOf(h2) >= 0).should.equal(true);
    });
  });

}).call(this);
